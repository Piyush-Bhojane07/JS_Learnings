
//get apis
const geoEndpoints = [
  'https://api.opentripmap.com/0.1/en/places/radius?radius=1000&lon=13.4050&lat=52.5200&rate=3&format=json&apikey=YOUR_API_KEY', // Places around coordinates
  'https://nominatim.openstreetmap.org/search?q=london&format=json&addressdetails=1' // Address parsing with nested details
];


const socialEndpoints = [
  'https://jsonplaceholder.typicode.com/posts?_embed=comments&_expand=user', // Posts with nested comments and user data
  'https://api.github.com/repos/facebook/react', // GitHub repo with nested contributors, issues, etc.
  'https://api.github.com/users/facebook/repos?sort=updated&per_page=10' // Multiple query parameters
];


const ecommerceEndpoints = [
  'https://fakestoreapi.com/products', // Products with categories, ratings, nested objects
  'https://fakestoreapi.com/products/categories', // Nested categories
  'https://dummyjson.com/products?limit=10&skip=10&select=title,price,rating,category' // Complex query parameters
];


const governmentEndpoints = [
  'https://api.covidtracking.com/v2/states.json', // COVID-19 data with nested state information
  'https://api.spacexdata.com/v4/launches/latest', // SpaceX launch data with complex nested objects
  'https://data.nasa.gov/resource/y77d-th95.json' // NASA meteorite landings with geolocation
];


const weatherEndpoints = [
  'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation_probability,windspeed_10m&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset&timezone=auto', // Detailed weather forecast
  'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weather_code,cloud_cover,pressure_msl,surface_pressure,wind_speed_10m,wind_direction_10m,wind_gusts_10m&hourly=temperature_2m,relative_humidity_2m,dew_point_2m,apparent_temperature,precipitation_probability,precipitation,rain,showers,snowfall,snow_depth,weather_code,pressure_msl,surface_pressure,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high,visibility,wind_speed_10m,wind_speed_80m,wind_speed_120m,wind_speed_180m,wind_direction_10m,wind_direction_80m,wind_direction_120m,wind_direction_180m,wind_gusts_10m,temperature_80m,temperature_120m,temperature_180m,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm,soil_moisture_0_1cm,soil_moisture_1_3cm,soil_moisture_3_9cm,soil_moisture_9_27cm,soil_moisture_27_81cm' // Ultra-detailed weather
];

const financialEndpoints = [
  'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false', // Cryptocurrency data
  'https://api.twelvedata.com/stocks?source=docs&exchange=NYSE', // Stock market data (free tier)
  'https://api.fiscaldata.treasury.gov/services/api/fiscal_service/v2/accounting/od/rates_of_exchange' // Currency exchange rates
];


const nasaEndpoints = [
  'https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY', // Astronomy Picture of the Day
  'https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY', // Mars Rover Photos
  'https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=DEMO_KEY' // Near Earth Objects
];





Common API Response Patterns:
1. Array Directly (Simplest)
typescript
// API returns: [item1, item2, item3]
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data; // Direct array
  }
};

// FlatList: data={data}
2. Object with Data Property
typescript
// API returns: { data: [item1, item2, item3] }
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data.data; // Extract the array
  }
};

// FlatList: data={data}
3. Object with Nested Array
typescript
// API returns: { results: { users: [item1, item2] } }
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data.results.users; // Go deep to get array
  }
};

// FlatList: data={data}
4. Complex Object with Metadata
typescript
// API returns: { 
//   status: "success", 
//   count: 2, 
//   data: [item1, item2] 
// }
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data.data; // Extract just the array
  }
};

// FlatList: data={data}
Real Examples with Dummy JSON:
Example 1: Simple Array
json
[
  {
    "id": 1,
    "name": "John",
    "email": "john@example.com"
  },
  {
    "id": 2, 
    "name": "Jane",
    "email": "jane@example.com"
  }
]
typescript
// Service - return direct array
return res.data;

// FlatList - use directly
data={data}
Example 2: Object with Data Property
json
{
  "data": [
    {
      "id": 1,
      "title": "Post 1",
      "body": "Content 1"
    },
    {
      "id": 2,
      "title": "Post 2", 
      "body": "Content 2"
    }
  ]
}
typescript
// Service - extract data array
return res.data.data;

// FlatList - use directly  
data={data}
Example 3: Complex Nested Structure (like NASA)
json
{
  "status": "success",
  "photos": [
    {
      "id": 1,
      "camera": {
        "name": "Front Camera",
        "full_name": "Front Hazard Camera"
      },
      "rover": {
        "name": "Curiosity",
        "status": "active"
      }
    },
    {
      "id": 2,
      "camera": {
        "name": "Rear Camera", 
        "full_name": "Rear Hazard Camera"
      },
      "rover": {
        "name": "Curiosity",
        "status": "active"
      }
    }
  ]
}
typescript
// Service - extract photos array
return res.data.photos;

// FlatList - use directly
data={data}
Example 4: Very Complex Nested
json
{
  "api_version": "v1",
  "results": {
    "items": {
      "users": [
        {
          "id": 1,
          "profile": {
            "personal": {
              "name": "John",
              "age": 25
            }
          }
        }
      ]
    }
  }
}
typescript
// Service - dig deep to get array
return res.data.results.items.users;

// FlatList - use directly
data={data}
Golden Rule:
Always return a flat array from your service so FlatList can use it directly with data={data}.

Your NASA Example Fixed:
typescript
// Service - returns Photo[] (array)
export const apiServiceNasa = {
  async getNasa(): Promise<Photo[]> {
    const res = await axios.get("your-url");
    return res.data.photos; // Extract the array from response object
  }
};

// Component - use directly in FlatList
<FlatList
  data={data} // This is now the photos array
  renderItem={({item}) => <Text>{item.id}</Text>} // item is a single photo
/>