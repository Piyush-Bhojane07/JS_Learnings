
https://api.twelvedata.com/stocks?source=docs&exchange=NYSE


https://api.twelvedata.com/stocks?source=docs&exchange=NYSE


https://api.spacexdata.com/v4/launches/latest


https://api.covidtracking.com/v2/states.json


https://dummyjson.com/products?limit=10&skip=10&select=title,price,rating,category





Common API Response Patterns:
1. Array Directly (Simplest)
typescript
// API returns: [item1, item2, item3]
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data; // Direct array
  }
};

// FlatList: data={data}
2. Object with Data Property
typescript
// API returns: { data: [item1, item2, item3] }
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data.data; // Extract the array
  }
};

// FlatList: data={data}
3. Object with Nested Array
typescript
// API returns: { results: { users: [item1, item2] } }
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data.results.users; // Go deep to get array
  }
};

// FlatList: data={data}
4. Complex Object with Metadata
typescript
// API returns: { 
//   status: "success", 
//   count: 2, 
//   data: [item1, item2] 
// }
export const apiService = {
  async getUsers(): Promise<User[]> {
    const res = await axios.get("https://api.example.com/users");
    return res.data.data; // Extract just the array
  }
};

// FlatList: data={data}
Real Examples with Dummy JSON:
Example 1: Simple Array
json
[
  {
    "id": 1,
    "name": "John",
    "email": "john@example.com"
  },
  {
    "id": 2, 
    "name": "Jane",
    "email": "jane@example.com"
  }
]
typescript
// Service - return direct array
return res.data;

// FlatList - use directly
data={data}
Example 2: Object with Data Property
json
{
  "data": [
    {
      "id": 1,
      "title": "Post 1",
      "body": "Content 1"
    },
    {
      "id": 2,
      "title": "Post 2", 
      "body": "Content 2"
    }
  ]
}
typescript
// Service - extract data array
return res.data.data;

// FlatList - use directly  
data={data}
Example 3: Complex Nested Structure (like NASA)
json
{
  "status": "success",
  "photos": [
    {
      "id": 1,
      "camera": {
        "name": "Front Camera",
        "full_name": "Front Hazard Camera"
      },
      "rover": {
        "name": "Curiosity",
        "status": "active"
      }
    },
    {
      "id": 2,
      "camera": {
        "name": "Rear Camera", 
        "full_name": "Rear Hazard Camera"
      },
      "rover": {
        "name": "Curiosity",
        "status": "active"
      }
    }
  ]
}
typescript
// Service - extract photos array
return res.data.photos;

// FlatList - use directly
data={data}
Example 4: Very Complex Nested
json
{
  "api_version": "v1",
  "results": {
    "items": {
      "users": [
        {
          "id": 1,
          "profile": {
            "personal": {
              "name": "John",
              "age": 25
            }
          }
        }
      ]
    }
  }
}
typescript
// Service - dig deep to get array
return res.data.results.items.users;

// FlatList - use directly
data={data}
Golden Rule:
Always return a flat array from your service so FlatList can use it directly with data={data}.

Your NASA Example Fixed:
typescript
// Service - returns Photo[] (array)
export const apiServiceNasa = {
  async getNasa(): Promise<Photo[]> {
    const res = await axios.get("your-url");
    return res.data.photos; // Extract the array from response object
  }
};

// Component - use directly in FlatList
<FlatList
  data={data} // This is now the photos array
  renderItem={({item}) => <Text>{item.id}</Text>} // item is a single photo
/>