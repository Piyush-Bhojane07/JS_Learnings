
how to debug the react native code  , 2-> // Styles are serialized once
const serializedStyles = {
  container: JSON.stringify({ padding: 10 }),
  text: JSON.stringify({ fontSize: 16 }),
};

// Subsequent references use cached versions  explain
Debugging React Native Code
Here are the main approaches to debug React Native applications:

1. Console Logging (Basic)
javascript
// Basic console methods
console.log('Data:', myData);
console.warn('Warning message');
console.error('Error message');

// Advanced console techniques
console.table([{name: 'John', age: 25}, {name: 'Jane', age: 30}]);
console.group('User Details');
console.log('Name: John');
console.log('Age: 25');
console.groupEnd();
2. React Developer Tools
bash
# Install React DevTools
npm install -g react-devtools

# Run separately
react-devtools
Inspect component hierarchy

View props and state

Debug component re-renders

3. React Native Debugger
bash
# Download from GitHub or install
npm install -g react-native-debugger
Combines React DevTools + Redux DevTools

Network inspection

Performance monitoring

4. Chrome Developer Tools
javascript
// In your app, shake device or press:
// iOS: Cmd+D → "Debug"
// Android: Cmd+M → "Debug"

// Then in Chrome: http://localhost:8081/debugger-ui
Debug JavaScript in Chrome

Set breakpoints

Network requests inspection

5. Flipper (Modern Approach)
bash
# Install Flipper desktop app
# Then install plugins:
npm install flipper-plugin-react-native-performance
Advanced debugging

Database inspection

Network monitoring

Layout inspection

6. Advanced Debugging Techniques
javascript
// Custom debug hook
import { useRef, useEffect } from 'react';

const useDebug = (componentName, props) => {
  const previousProps = useRef();
  
  useEffect(() => {
    if (previousProps.current) {
      const changedProps = Object.keys(props).reduce((acc, key) => {
        if (props[key] !== previousProps.current[key]) {
          acc[key] = {
            from: previousProps.current[key],
            to: props[key]
          };
        }
        return acc;
      }, {});
      
      if (Object.keys(changedProps).length) {
        console.log(`${componentName} changed props:`, changedProps);
      }
    }
    previousProps.current = props;
  });
};

// Usage in component
const MyComponent = (props) => {
  useDebug('MyComponent', props);
  return <View>...</View>;
};
7. Performance Debugging
javascript
import { Performance } from 'react-native-performance';

// Measure component render time
const measureRender = () => {
  Performance.mark('render-start');
  
  // Your component code
  
  Performance.mark('render-end');
  Performance.measure('render-time', 'render-start', 'render-end');
};

// Log slow renders
const REPORT_THRESHOLD = 100; // ms

Performance.observe('measure', (entry) => {
  if (entry.duration > REPORT_THRESHOLD) {
    console.warn(`Slow operation: ${entry.name} took ${entry.duration}ms`);
  }
});
